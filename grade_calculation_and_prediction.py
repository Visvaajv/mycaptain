# -*- coding: utf-8 -*-
"""Grade Calculation and Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gAHRA5jqbzJtpacUn_iuElaLwJ78UkxH
"""



# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES
# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'student-grade-prediction:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F52721%2F99691%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240325%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240325T081806Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D80b7e0d422a766204959d448d481df54d81287335e6baa38c762a66e7ea2a430390a669ed90c6677d00c015850e432eace1d80d5884ce82dd1ce06c0d83d42b7a46389ca67147c5e206d837b7c7b205d853b15979d9ac04296b79b7a8355c68f478f416a5a5a127fa4fa0f7844e8bec0e3aed0b73fd3d7d4e2b687e1cecc7e8468a309699ed8196d320d2fdf507c826b3f4d37722f9de4de49cc5065d20554f20c12b53886332810d9b26066c4a1aa73ef6d0d36241d3b8f16f64b4e3671d844187908e53baa6a4ca49f770135997babc06c12c6ec0872ea2bb8c85ec1a447176d09034c0e09aa9ab1bd3f85d55a5f3285f934a38a5411a3b2d9faf9943e3acd'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

"""**Student Grade Prediction**

> **Importing Required Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re
import nltk
import string
from nltk.corpus import *
from wordcloud import *
from sklearn import *
from sklearn.model_selection import KFold, cross_val_score
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.decomposition import *
from sklearn.tree import *
from sklearn.feature_extraction.text import *
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import *
from sklearn.metrics import *
# %matplotlib inline

"""> **Import and read the data**"""

student_data=pd.read_csv('../input/student-grade-prediction/student-mat.csv')
student_data.head()

print(f"Lenght: {len(student_data)}")
print(f"Shape: {student_data.shape}")
print(f"Columns: {student_data.columns}")

"""> **Explore data**"""

student_data.info()

"""> **Visualize**"""

student_data.describe()

"""> **Cleaning data**"""

student_data.isnull().any()

"""> **Analyze**"""

student_data.drop('famsize',axis=1,inplace=True)
student_data.head()

"""> **Filter only numerical columns**"""

numerical_columns = student_data.select_dtypes(include='number')

"""> **Display the resulting DataFrame with only numerical columns**"""

print(numerical_columns)

numerical_columns.corr()

best_features=['studytime','failures', 'absences', 'G1', 'G2']

sns.pairplot(student_data[best_features], kind='scatter', diag_kind='kde', diag_kws={'bw_adjust': 1.5})
plt.subplots_adjust(hspace=0.5, wspace=0.5)

"""> **Visualize results**"""

student_data.groupby('school')['G1'].mean()

student_data.groupby('school')['G1'].count()

student_data['mean_periods'] = (student_data.G1 + student_data.G2 + student_data.G3) / 3

plt.hist(student_data.mean_periods)

"""> *Boys spend less time on studying than girls*
>
"""

sns.histplot(data=student_data, x='studytime', y='mean_periods', hue='sex')

"""In general boys study better than girls


"""

student_data.groupby('sex')['mean_periods'].mean()

"""Internet improves your marks


"""

sns.displot(x='G3', hue='internet',data=student_data,stat='probability')

"""Students who don't take paid classes have better marks


"""

plt.figure(figsize=[12,8])
sns.boxplot(x='paid', y='G3', data=student_data)

"""Encoding variables"""

category_student_data = student_data.select_dtypes(include=['object'])

student_data_dummy = pd.get_dummies(category_student_data)

student_data_dummy['G3'] = student_data['G3']

student_data_dummy.corr()['G3'].sort_values(ascending=False)

y = student_data['G3']

X = student_data.drop(['G1', 'G2', 'mean_periods', 'school'], axis=1)

X = pd.get_dummies(X)

most_correlated = X.corr().abs()['G3'].sort_values(ascending=False)

"""Students whose parents have better education score higher


"""

sns.scatterplot(x='Medu', y='G3', data=X)

sns.scatterplot(x='Fedu', y='G3', data=X)

"""Age does not affect score


"""

sns.scatterplot(data=X, x='age', y='G3')

"""Students who want to take higher education score better"""

sns.countplot(data=X, x='higher_yes')

"""Students who do not have romantic relat. score better


"""

sns.countplot(data=X, x='romantic_no')

"""Internet improves your marks"""

sns.displot(x='G3',
           hue='internet',
           data=student_data,
           stat='probability')

"""Students who don't take paid classes have better marks

"""

plt.figure(figsize=[12,8])
sns.boxplot(x='paid', y='G3', data=student_data)